(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{73:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return r})),a.d(t,"toc",(function(){return b})),a.d(t,"default",(function(){return p}));var n=a(3),l=a(7),i=(a(0),a(88)),o={id:"api",title:"Api Reference",sidebar_label:"Api Reference",slug:"/api/"},r={unversionedId:"api",id:"api",isDocsHomePage:!1,title:"Api Reference",description:"StorageWrapper",source:"@site/docs/api.md",slug:"/api/",permalink:"/docs/api/",version:"current",sidebar_label:"Api Reference",sidebar:"Getting Started",previous:{title:"Usage",permalink:"/docs/usage/"}},b=[{value:"<code>getItem</code>",id:"getitem",children:[]},{value:"<code>setItem</code>",id:"setitem",children:[]}],c={toc:b};function p(e){var t=e.components,a=Object(l.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"storagewrapper"},"StorageWrapper"),Object(i.b)("p",null,"The storage wrapper is the main class with which the user interacts in this library. Its a high level abstraction on top of localForage which adds extra functionalities. By and large the methods of the ",Object(i.b)("inlineCode",{parentName:"p"},"StorageWrapper")," are similar to those of ",Object(i.b)("inlineCode",{parentName:"p"},"localForage")," and to an extent - ",Object(i.b)("inlineCode",{parentName:"p"},"React-Native AsyncStorage"),". "),Object(i.b)("h2",{id:"getitem"},Object(i.b)("inlineCode",{parentName:"h2"},"getItem")),Object(i.b)("p",null,"Retrieves a value from storage. The value is automatically deserialized into a javascript value, so you do not need to call ",Object(i.b)("inlineCode",{parentName:"p"},"JSON.parse()"),". "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Signature"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"getItem<T>(\n    key: string, \n    options?: {\n        fallback?: T\n        allowNull?: boolean\n    },\n    callback?: (error: Error, result: T | null) => void\n): Promise<T | null>\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"key"),": The key of the value being retrieved (",Object(i.b)("strong",{parentName:"p"},"required"),")"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"options"),": The second parameter is an optional object that has two optional keys: "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"fallback"),": By default ",Object(i.b)("inlineCode",{parentName:"li"},"getItem"),"returns ",Object(i.b)("inlineCode",{parentName:"li"},"null")," when no value is found for the given key. You can customize this by passing an optional fallback value as part of the options object."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"allowNull"),": By default ",Object(i.b)("inlineCode",{parentName:"li"},"getItem")," will not throw an error if a value is not found for the given key and no fallback is provided. To change this, you can set ",Object(i.b)("inlineCode",{parentName:"li"},"allowNull")," to ",Object(i.b)("inlineCode",{parentName:"li"},"true"),", which will cause the function to throw a ",Object(i.b)("inlineCode",{parentName:"li"},"CacheError")," if no value is found. ")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"callback"),": For legacy compatibility - you can pass a node style callback. "),Object(i.b)("br",null),Object(i.b)("br",null),Object(i.b)("h2",{id:"setitem"},Object(i.b)("inlineCode",{parentName:"h2"},"setItem")),Object(i.b)("p",null,"Sets a value in storage. The value is automatically serialized, so you do not need to call ",Object(i.b)("inlineCode",{parentName:"p"},"JSON.stringify()"),". "),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"NOTE"),": If you want to serialized functions or classes with methods you will need to serialized them before calling setItem, because these cannot be serialized by the library."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Signature"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"setItem<T>(\n    key: string,\n    value: () => T | T,\n    maxAge?: number | [number, TimeUnit],\n    callback?: (error: Error, result: CacheRecord<T>) => void,\n): Promise<void>\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Options")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"fallback"),": By default ",Object(i.b)("inlineCode",{parentName:"p"},"getItem"),"returns ",Object(i.b)("inlineCode",{parentName:"p"},"null")," when no value is found for the given key. You can customize this by passing an optional fallback value as part of the options object."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"allowNull"),": By default ",Object(i.b)("inlineCode",{parentName:"p"},"getItem")," will not throw an error if a value is not found for the given key. To change this, you can set ",Object(i.b)("inlineCode",{parentName:"p"},"allowNull")," to ",Object(i.b)("inlineCode",{parentName:"p"},"true"),", which will cause the function to throw a ",Object(i.b)("inlineCode",{parentName:"p"},"CacheError")," if no value is found. "),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"NOTE")," if a ",Object(i.b)("inlineCode",{parentName:"p"},"fallback")," is provided no error will be thrown and the fallback value will be returned. "),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"preferCache"),": By default the in-memory cache is prefered. Setting ",Object(i.b)("inlineCode",{parentName:"p"},"preferCache")," to ",Object(i.b)("inlineCode",{parentName:"p"},"false"),", will cause ",Object(i.b)("inlineCode",{parentName:"p"},"getItem")," to retrieve the value directly from storage. "),Object(i.b)("br",null),Object(i.b)("br",null))}p.isMDXComponent=!0}}]);