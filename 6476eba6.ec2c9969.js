(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{74:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return l}));var a=n(3),o=n(7),r=(n(0),n(88)),s={id:"usage",title:"Usage",sidebar_label:"Usage",slug:"/usage/"},i={unversionedId:"usage",id:"usage",isDocsHomePage:!1,title:"Usage",description:"To begin using this library you have to create at least a single storage store. You can do this in several ways, with the recommended pattern being to use the StorageProvider, which is illustrated below.",source:"@site/docs/usage.md",slug:"/usage/",permalink:"/docs/usage/",version:"current",sidebar_label:"Usage",sidebar:"docs",previous:{title:"Installation",permalink:"/docs/"},next:{title:"Configuration",permalink:"/docs/configuration/"}},c=[{value:"Using the StorageProvider",id:"using-the-storageprovider",children:[]},{value:"Passing Configs",id:"passing-configs",children:[]},{value:"Using Storage",id:"using-storage",children:[]}],p={toc:c};function l(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"To begin using this library you have to create at least a single storage store. You can do this in several ways, with the recommended pattern being to use the ",Object(r.b)("inlineCode",{parentName:"p"},"StorageProvider"),", which is illustrated below."),Object(r.b)("p",null,"::: note If you'd like to read-up on the other options, see the Advanced section.\n:::"),Object(r.b)("h3",{id:"using-the-storageprovider"},"Using the StorageProvider"),Object(r.b)("p",null,"The storageProvider is a high level abstraction that encapsulates the ",Object(r.b)("inlineCode",{parentName:"p"},"storageFactory")," and injects the ",Object(r.b)("inlineCode",{parentName:"p"},"StorageContext")," to its tree of children. It should be placed high up in the component tree as a wrapper:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"import { StorageProvider } from 'react-async-storage'\nimport React from 'react'\n\nexport default function App() {\n    return (\n        <React.Fragment>\n            <StorageProvider>{/* Rest of your app code */}</StorageProvider>\n        </React.Fragment>\n    )\n}\n")),Object(r.b)("p",null,"The Provider does not need to be the top-most container in the App, but it should wrap all components that need to interact with the storage using the library's ",Object(r.b)("inlineCode",{parentName:"p"},"useStorage")," hook, and all code that needs to make calls to the async storage during the App's first render. For example:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"import { StorageProvider } from 'react-async-storage'\nimport React from 'react'\n\nimport { MyReduxStoreProvider } from './store'\n\nexport default function App() {\n    return (\n        <React.Fragment>\n            <StorageProvider>\n                <MyReduxStoreProvider>\n                    {/* Rest of your app code */}\n                </MyReduxStoreProvider>\n            </StorageProvider>\n        </React.Fragment>\n    )\n}\n")),Object(r.b)("p",null,"In the above example, the ReduxStoreProvider is located inside the StorageProvider tag to ensure async store actions can rely on the async storage during the init process."),Object(r.b)("h3",{id:"passing-configs"},"Passing Configs"),Object(r.b)("p",null,"You can pass configs to the provider using the ",Object(r.b)("inlineCode",{parentName:"p"},"options")," prop. This prop accepts either a config object or an array of config objects:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),'import { StorageProvider } from "react-async-storage"\nimport React from \'react\'\n\nconst storageConfigs = [\n  {\n    storeName: "mainStore",\n    version: "1.0.1",\n  },\n  {\n    storeName: "otherStore",\n    version "1.0.0",\n  }\n]\n\nexport default function App() {\n  return (\n    <StorageProvider options={storageConfigs}>{/* Rest of your app code */}</StorageProvider>\n  )\n}\n')),Object(r.b)("p",null,"::: note this is completely optional - if you do not pass configs, the library's defaults will be used.\nfor details about the available configs, see the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/configuration/"}),"configuration reference"),"\n:::"),Object(r.b)("h3",{id:"using-storage"},"Using Storage"),Object(r.b)("p",null,"With the ",Object(r.b)("inlineCode",{parentName:"p"},"StorageProvider")," in place, you can now use the storage in one of 3 ways:"),Object(r.b)("h4",{id:"1-usestorage-hook"},"1. useStorage Hook"),Object(r.b)("p",null,"If you are using functional components, you can use the ",Object(r.b)("inlineCode",{parentName:"p"},"useStorage")," hook, which offers a convenient way to access a store inside a react component."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'import { useStorage } from "react-async-storage"\nimport React, { useState, useEffect } from \'react\'\n\nexport default function MyComponent() {\n  const [myCachedValue, setMyCachedValue] = useState<MyInterface | null>(null)\n  /*\n    useStorage receives an optional string as a parameter - each representing a "storeName".\n    If no parameter is provided it will return the default store name.\n  */\n  const mainStore = useStorage("mainStore")\n\n  useEffect(() => {\n    /*\n      Interacting with the store for getItem/setItem/removeItem method calls is async.\n      It should therefore happen inside an async function, useEffect block or life-cycle hook.\n    */\n    ;(async () => {\n      const cachedValue = await mainStore.getItem<MyInterface>("someCacheKey")\n      setMyCachedValue(cachedValue)\n    })()\n  }, [])\n  ...\n}\n')),Object(r.b)("h4",{id:"2-using-the-storagecontext"},"2. using the StorageContext"),Object(r.b)("p",null,"If you are using class based components, you can use the StorageContext directly in your component, for example using the contextType property:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'import { StorageContext } from "react-async-storage"\nimport { User } from "../types"\nimport ApiClient from "../api"\nimport React, { Component } from \'react\'\n\n\nclass MyComponent extends Component {\n  static contextType = StorageContext\n\n  async fetchUser(): Promise<User> {\n    /*\n    The StorageContext is a map of storeNames -> stores. It can be interacted with like a regular object.\n    If no parameter is provided it will try to return the default store name.\n    */\n    const { mainStore } = this.context\n\n    if (mainStore.hasItem("someKey")) {\n      return await mainStore.getItem<User>("someKey")\n    } else {\n      const user = await ApiClient.get<User>("/user")\n      await mainStore.setItem("someKey", user)\n      return user\n    }\n\n    ...\n  }\n}\n')),Object(r.b)("h4",{id:"3-using-the-getstorage-helper"},"3. using the getStorage helper"),Object(r.b)("p",null,"The previous two options work nicely for react components, but what if you want to use a store outside of a react component? For this purpose you can use the ",Object(r.b)("inlineCode",{parentName:"p"},"getStorage")," helper. For example, this is a how it can be used inside a ",Object(r.b)("inlineCode",{parentName:"p"},"Redux Thunk")," async action:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { getStorage } from 'react-async-storage'\nimport { TypedThunkResult, TypedThunkDispatch, User } from '../types'\nimport ApiClient from '../api'\n\nexport function getUser(): TypedThunkResult {\n    return async (dispatch: TypedThunkDispatch) => {\n        /*\n        getStorage receives an optional string as a parameter.\n        If no parameter is provided it will try to return the default store name.\n        */\n        const mainStore = getStorage('mainStore')\n\n        const user = mainStore.hasItem('someKey')\n            ? await mainStore.getItem<User>('someKey')\n            : await ApiClient.get<User>('/user')\n\n        dispatch({\n            type: SET_USER,\n            payload: user,\n        })\n    }\n}\n")),Object(r.b)("div",{className:"admonition admonition-important alert alert--info"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"when using ",Object(r.b)("inlineCode",{parentName:"h5"},"getStorage"),", care must be given to use it only in code that is called after the ",Object(r.b)("inlineCode",{parentName:"h5"},"StorageProvider")," has been initialized.")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}))))}l.isMDXComponent=!0}}]);